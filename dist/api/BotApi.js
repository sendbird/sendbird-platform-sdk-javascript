"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _CreateABotRequest = _interopRequireDefault(require("../model/CreateABotRequest"));
var _CreateABotResponse = _interopRequireDefault(require("../model/CreateABotResponse"));
var _JoinChannelsRequest = _interopRequireDefault(require("../model/JoinChannelsRequest"));
var _ListBotsResponse = _interopRequireDefault(require("../model/ListBotsResponse"));
var _SendABotMessageRequest = _interopRequireDefault(require("../model/SendABotMessageRequest"));
var _SendbirdGroupChannelDetail = _interopRequireDefault(require("../model/SendbirdGroupChannelDetail"));
var _SendbirdMessageResponse = _interopRequireDefault(require("../model/SendbirdMessageResponse"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Sendbird Platform SDK
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Bot service.
* @module api/BotApi
* @version 2.0.0
*/
var BotApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new BotApi. 
  * @alias module:api/BotApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function BotApi(apiClient) {
    _classCallCheck(this, BotApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Create a bot
   * ## Create a bot  Creates a new bot within an application. Creating a bot is similar to creating a normal user, except a callback URL should be specified for a bot to receive events.  > **Note**: The bot must first [join a group channel](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels) to interact with users. In group channels, you can also invite a bot through the [invite as members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel) action.      [https://sendbird.com/docs/chat/platform-api/v3/bot/creating-a-bot/create-a-bot#1-create-a-bot](https://sendbird.com/docs/chat/platform-api/v3/bot/creating-a-bot/create-a-bot#1-create-a-bot)
   * @param {Object} opts Optional parameters
   * @param {String} opts.apiToken 
   * @param {module:model/CreateABotRequest} opts.createABotRequest 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateABotResponse} and HTTP response
   */
  return _createClass(BotApi, [{
    key: "createABotWithHttpInfo",
    value: function createABotWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['createABotRequest'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'api-token': opts['apiToken']
      };
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _CreateABotResponse["default"];
      return this.apiClient.callApi('/v3/bots', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create a bot
     * ## Create a bot  Creates a new bot within an application. Creating a bot is similar to creating a normal user, except a callback URL should be specified for a bot to receive events.  > **Note**: The bot must first [join a group channel](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels) to interact with users. In group channels, you can also invite a bot through the [invite as members](https://sendbird.com/docs/chat/platform-api/v3/channel/inviting-a-user/invite-as-members-channel) action.      [https://sendbird.com/docs/chat/platform-api/v3/bot/creating-a-bot/create-a-bot#1-create-a-bot](https://sendbird.com/docs/chat/platform-api/v3/bot/creating-a-bot/create-a-bot#1-create-a-bot)
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiToken 
     * @param {module:model/CreateABotRequest} opts.createABotRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateABotResponse}
     */
  }, {
    key: "createABot",
    value: function createABot(opts) {
      return this.createABotWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Join channels
     * ## Join channels  Makes a bot join one or more group channels.  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels#1-join-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels#1-join-channels)
     * @param {String} botUserid (Required) 
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiToken 
     * @param {module:model/JoinChannelsRequest} opts.joinChannelsRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendbirdGroupChannelDetail} and HTTP response
     */
  }, {
    key: "joinChannelsWithHttpInfo",
    value: function joinChannelsWithHttpInfo(botUserid, opts) {
      opts = opts || {};
      var postBody = opts['joinChannelsRequest'];
      // verify the required parameter 'botUserid' is set
      if (botUserid === undefined || botUserid === null) {
        throw new Error("Missing the required parameter 'botUserid' when calling joinChannels");
      }
      var pathParams = {
        'bot_userid': botUserid
      };
      var queryParams = {};
      var headerParams = {
        'api-token': opts['apiToken']
      };
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SendbirdGroupChannelDetail["default"];
      return this.apiClient.callApi('/v3/bots/{bot_userid}/channels', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Join channels
     * ## Join channels  Makes a bot join one or more group channels.  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels#1-join-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/join-channels#1-join-channels)
     * @param {String} botUserid (Required) 
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiToken 
     * @param {module:model/JoinChannelsRequest} opts.joinChannelsRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendbirdGroupChannelDetail}
     */
  }, {
    key: "joinChannels",
    value: function joinChannels(botUserid, opts) {
      return this.joinChannelsWithHttpInfo(botUserid, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Leave channels - When leaving a specific channel
     * ## Leave channels  Makes a bot leave a specific channel  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels)
     * @param {String} channelUrl 
     * @param {String} botUserid (Required) 
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiToken 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  }, {
    key: "leaveAGroupChannelWithHttpInfo",
    value: function leaveAGroupChannelWithHttpInfo(channelUrl, botUserid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'channelUrl' is set
      if (channelUrl === undefined || channelUrl === null) {
        throw new Error("Missing the required parameter 'channelUrl' when calling leaveAGroupChannel");
      }
      // verify the required parameter 'botUserid' is set
      if (botUserid === undefined || botUserid === null) {
        throw new Error("Missing the required parameter 'botUserid' when calling leaveAGroupChannel");
      }
      var pathParams = {
        'channel_url': channelUrl,
        'bot_userid': botUserid
      };
      var queryParams = {};
      var headerParams = {
        'api-token': opts['apiToken']
      };
      var formParams = {};
      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/v3/bots/{bot_userid}/channels/{channel_url}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Leave channels - When leaving a specific channel
     * ## Leave channels  Makes a bot leave a specific channel  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels)
     * @param {String} channelUrl 
     * @param {String} botUserid (Required) 
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiToken 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  }, {
    key: "leaveAGroupChannel",
    value: function leaveAGroupChannel(channelUrl, botUserid, opts) {
      return this.leaveAGroupChannelWithHttpInfo(channelUrl, botUserid, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Leave channels - When leaving all channels
     * ## Leave channels  Makes a bot leave all group channels.  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels)
     * @param {String} botUserid (Required) 
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiToken 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  }, {
    key: "leaveGroupChannelsWithHttpInfo",
    value: function leaveGroupChannelsWithHttpInfo(botUserid, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'botUserid' is set
      if (botUserid === undefined || botUserid === null) {
        throw new Error("Missing the required parameter 'botUserid' when calling leaveGroupChannels");
      }
      var pathParams = {
        'bot_userid': botUserid
      };
      var queryParams = {};
      var headerParams = {
        'api-token': opts['apiToken']
      };
      var formParams = {};
      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/v3/bots/{bot_userid}/channels', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Leave channels - When leaving all channels
     * ## Leave channels  Makes a bot leave all group channels.  [https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels](https://sendbird.com/docs/chat/platform-api/v3/bot/managing-a-bot/leave-channels#1-leave-channels)
     * @param {String} botUserid (Required) 
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiToken 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  }, {
    key: "leaveGroupChannels",
    value: function leaveGroupChannels(botUserid, opts) {
      return this.leaveGroupChannelsWithHttpInfo(botUserid, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List bots
     * ## List bots  Retrieves a list of all bots within an application.  https://sendbird.com/docs/chat/platform-api/v3/bot/listing-bots/list-bots#1-list-bots
     * @param {Object} opts Optional parameters
     * @param {String} opts.token 
     * @param {Number} opts.limit 
     * @param {String} opts.apiToken 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListBotsResponse} and HTTP response
     */
  }, {
    key: "listBotsWithHttpInfo",
    value: function listBotsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'token': opts['token'],
        'limit': opts['limit']
      };
      var headerParams = {
        'api-token': opts['apiToken']
      };
      var formParams = {};
      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ListBotsResponse["default"];
      return this.apiClient.callApi('/v3/bots', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List bots
     * ## List bots  Retrieves a list of all bots within an application.  https://sendbird.com/docs/chat/platform-api/v3/bot/listing-bots/list-bots#1-list-bots
     * @param {Object} opts Optional parameters
     * @param {String} opts.token 
     * @param {Number} opts.limit 
     * @param {String} opts.apiToken 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListBotsResponse}
     */
  }, {
    key: "listBots",
    value: function listBots(opts) {
      return this.listBotsWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Send a bot's message
     * ## Send a bot message  Sends a bot message to a group channel.  [https://sendbird.com/docs/chat/platform-api/v3/bot/sending-a-bot-message/send-a-bot-message#1-send-a-bot-message](https://sendbird.com/docs/chat/platform-api/v3/bot/sending-a-bot-message/send-a-bot-message#1-send-a-bot-message)  `bot_userid`   Type: string   Description: Specifies the ID of the bot to send a message.
     * @param {String} botUserid (Required) 
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiToken 
     * @param {module:model/SendABotMessageRequest} opts.sendABotMessageRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SendbirdMessageResponse} and HTTP response
     */
  }, {
    key: "sendABotMessageWithHttpInfo",
    value: function sendABotMessageWithHttpInfo(botUserid, opts) {
      opts = opts || {};
      var postBody = opts['sendABotMessageRequest'];
      // verify the required parameter 'botUserid' is set
      if (botUserid === undefined || botUserid === null) {
        throw new Error("Missing the required parameter 'botUserid' when calling sendABotMessage");
      }
      var pathParams = {
        'bot_userid': botUserid
      };
      var queryParams = {};
      var headerParams = {
        'api-token': opts['apiToken']
      };
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SendbirdMessageResponse["default"];
      return this.apiClient.callApi('/v3/bots/{bot_userid}/send', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Send a bot's message
     * ## Send a bot message  Sends a bot message to a group channel.  [https://sendbird.com/docs/chat/platform-api/v3/bot/sending-a-bot-message/send-a-bot-message#1-send-a-bot-message](https://sendbird.com/docs/chat/platform-api/v3/bot/sending-a-bot-message/send-a-bot-message#1-send-a-bot-message)  `bot_userid`   Type: string   Description: Specifies the ID of the bot to send a message.
     * @param {String} botUserid (Required) 
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiToken 
     * @param {module:model/SendABotMessageRequest} opts.sendABotMessageRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SendbirdMessageResponse}
     */
  }, {
    key: "sendABotMessage",
    value: function sendABotMessage(botUserid, opts) {
      return this.sendABotMessageWithHttpInfo(botUserid, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();