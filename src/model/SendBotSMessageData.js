/**
 * Sendbird Platform SDK
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SendBotSMessageData model module.
 * @module model/SendBotSMessageData
 * @version 1.0.7
 */
class SendBotSMessageData {
    /**
     * Constructs a new <code>SendBotSMessageData</code>.
     * @alias module:model/SendBotSMessageData
     * @param message {String} Specifies the content of the message sent by the bot.
     * @param channelUrl {String} Specifies the URL of the channel where the message is sent to.
     */
    constructor(message, channelUrl) { 
        
        SendBotSMessageData.initialize(this, message, channelUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, message, channelUrl) { 
        obj['message'] = message;
        obj['channel_url'] = channelUrl;
    }

    /**
     * Constructs a <code>SendBotSMessageData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendBotSMessageData} obj Optional instance to populate.
     * @return {module:model/SendBotSMessageData} The populated <code>SendBotSMessageData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendBotSMessageData();

            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('channel_url')) {
                obj['channel_url'] = ApiClient.convertToType(data['channel_url'], 'String');
            }
            if (data.hasOwnProperty('custom_type')) {
                obj['custom_type'] = ApiClient.convertToType(data['custom_type'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('send_push')) {
                obj['send_push'] = ApiClient.convertToType(data['send_push'], 'Boolean');
            }
            if (data.hasOwnProperty('mentioned')) {
                obj['mentioned'] = ApiClient.convertToType(data['mentioned'], ['String']);
            }
            if (data.hasOwnProperty('mark_as_read')) {
                obj['mark_as_read'] = ApiClient.convertToType(data['mark_as_read'], 'Boolean');
            }
            if (data.hasOwnProperty('dedup_id')) {
                obj['dedup_id'] = ApiClient.convertToType(data['dedup_id'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * Specifies the content of the message sent by the bot.
 * @member {String} message
 */
SendBotSMessageData.prototype['message'] = undefined;

/**
 * Specifies the URL of the channel where the message is sent to.
 * @member {String} channel_url
 */
SendBotSMessageData.prototype['channel_url'] = undefined;

/**
 * Specifies a custom message type which is used for message grouping. The length is limited to 128 characters.
 * @member {String} custom_type
 */
SendBotSMessageData.prototype['custom_type'] = undefined;

/**
 * Specifies additional message information such as custom font size, font type or `JSON` formatted string.
 * @member {String} data
 */
SendBotSMessageData.prototype['data'] = undefined;

/**
 * Determines whether to send a push notification for the message to the members of the channel (Default: true)
 * @member {Boolean} send_push
 */
SendBotSMessageData.prototype['send_push'] = undefined;

/**
 * Specifies an array of one or more IDs of the users who get a notification for the message.
 * @member {Array.<String>} mentioned
 */
SendBotSMessageData.prototype['mentioned'] = undefined;

/**
 * Determines whether to mark the message as read for the bot. If set to false, the bot's unread_count and read_receipt remain unchanged after the message is sent. (Default: true)
 * @member {Boolean} mark_as_read
 */
SendBotSMessageData.prototype['mark_as_read'] = undefined;

/**
 * Specifies the unique ID for the message to prevent the same message data from getting sent to the channel.
 * @member {String} dedup_id
 */
SendBotSMessageData.prototype['dedup_id'] = undefined;

/**
 * Specifies the time that the message was sent, in [Unix milliseconds](/docs/chat/v3/platform-api/guides/miscellaneous#2-timestamps) format.
 * @member {Number} created_at
 */
SendBotSMessageData.prototype['created_at'] = undefined;






export default SendBotSMessageData;

