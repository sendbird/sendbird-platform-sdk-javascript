/**
 * Sendbird Platform SDK
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SendBirdGroupChannelFilterSearchFilter from './SendBirdGroupChannelFilterSearchFilter';
import SendBirdGroupChannelFilterUserIdsFilter from './SendBirdGroupChannelFilterUserIdsFilter';

/**
 * The SendBirdGroupChannelFilter model module.
 * @module model/SendBirdGroupChannelFilter
 * @version 1.0.0
 */
class SendBirdGroupChannelFilter {
    /**
     * Constructs a new <code>SendBirdGroupChannelFilter</code>.
     * @alias module:model/SendBirdGroupChannelFilter
     */
    constructor() { 
        
        SendBirdGroupChannelFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SendBirdGroupChannelFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendBirdGroupChannelFilter} obj Optional instance to populate.
     * @return {module:model/SendBirdGroupChannelFilter} The populated <code>SendBirdGroupChannelFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendBirdGroupChannelFilter();

            if (data.hasOwnProperty('channelNameContainsFilter')) {
                obj['channelNameContainsFilter'] = ApiClient.convertToType(data['channelNameContainsFilter'], 'String');
            }
            if (data.hasOwnProperty('channelUrlsFilter')) {
                obj['channelUrlsFilter'] = ApiClient.convertToType(data['channelUrlsFilter'], ['String']);
            }
            if (data.hasOwnProperty('customTypeStartsWithFilter')) {
                obj['customTypeStartsWithFilter'] = ApiClient.convertToType(data['customTypeStartsWithFilter'], 'String');
            }
            if (data.hasOwnProperty('customTypesFilter')) {
                obj['customTypesFilter'] = ApiClient.convertToType(data['customTypesFilter'], ['String']);
            }
            if (data.hasOwnProperty('hiddenChannelFilter')) {
                obj['hiddenChannelFilter'] = ApiClient.convertToType(data['hiddenChannelFilter'], 'String');
            }
            if (data.hasOwnProperty('includeEmpty')) {
                obj['includeEmpty'] = ApiClient.convertToType(data['includeEmpty'], 'Boolean');
            }
            if (data.hasOwnProperty('includeFrozen')) {
                obj['includeFrozen'] = ApiClient.convertToType(data['includeFrozen'], 'Boolean');
            }
            if (data.hasOwnProperty('includeMetaData')) {
                obj['includeMetaData'] = ApiClient.convertToType(data['includeMetaData'], 'Boolean');
            }
            if (data.hasOwnProperty('memberStateFilter')) {
                obj['memberStateFilter'] = ApiClient.convertToType(data['memberStateFilter'], 'String');
            }
            if (data.hasOwnProperty('nicknameContainsFilter')) {
                obj['nicknameContainsFilter'] = ApiClient.convertToType(data['nicknameContainsFilter'], 'String');
            }
            if (data.hasOwnProperty('publicChannelFilter')) {
                obj['publicChannelFilter'] = ApiClient.convertToType(data['publicChannelFilter'], 'String');
            }
            if (data.hasOwnProperty('searchFilter')) {
                obj['searchFilter'] = SendBirdGroupChannelFilterSearchFilter.constructFromObject(data['searchFilter']);
            }
            if (data.hasOwnProperty('superChannelFilter')) {
                obj['superChannelFilter'] = ApiClient.convertToType(data['superChannelFilter'], 'String');
            }
            if (data.hasOwnProperty('unreadChannelFilter')) {
                obj['unreadChannelFilter'] = ApiClient.convertToType(data['unreadChannelFilter'], 'String');
            }
            if (data.hasOwnProperty('userIdsFilter')) {
                obj['userIdsFilter'] = SendBirdGroupChannelFilterUserIdsFilter.constructFromObject(data['userIdsFilter']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} channelNameContainsFilter
 */
SendBirdGroupChannelFilter.prototype['channelNameContainsFilter'] = undefined;

/**
 * @member {Array.<String>} channelUrlsFilter
 */
SendBirdGroupChannelFilter.prototype['channelUrlsFilter'] = undefined;

/**
 * @member {String} customTypeStartsWithFilter
 */
SendBirdGroupChannelFilter.prototype['customTypeStartsWithFilter'] = undefined;

/**
 * @member {Array.<String>} customTypesFilter
 */
SendBirdGroupChannelFilter.prototype['customTypesFilter'] = undefined;

/**
 * @member {module:model/SendBirdGroupChannelFilter.HiddenChannelFilterEnum} hiddenChannelFilter
 */
SendBirdGroupChannelFilter.prototype['hiddenChannelFilter'] = undefined;

/**
 * @member {Boolean} includeEmpty
 */
SendBirdGroupChannelFilter.prototype['includeEmpty'] = undefined;

/**
 * @member {Boolean} includeFrozen
 */
SendBirdGroupChannelFilter.prototype['includeFrozen'] = undefined;

/**
 * @member {Boolean} includeMetaData
 */
SendBirdGroupChannelFilter.prototype['includeMetaData'] = undefined;

/**
 * @member {module:model/SendBirdGroupChannelFilter.MemberStateFilterEnum} memberStateFilter
 */
SendBirdGroupChannelFilter.prototype['memberStateFilter'] = undefined;

/**
 * @member {String} nicknameContainsFilter
 */
SendBirdGroupChannelFilter.prototype['nicknameContainsFilter'] = undefined;

/**
 * @member {module:model/SendBirdGroupChannelFilter.PublicChannelFilterEnum} publicChannelFilter
 */
SendBirdGroupChannelFilter.prototype['publicChannelFilter'] = undefined;

/**
 * @member {module:model/SendBirdGroupChannelFilterSearchFilter} searchFilter
 */
SendBirdGroupChannelFilter.prototype['searchFilter'] = undefined;

/**
 * @member {module:model/SendBirdGroupChannelFilter.SuperChannelFilterEnum} superChannelFilter
 */
SendBirdGroupChannelFilter.prototype['superChannelFilter'] = undefined;

/**
 * @member {module:model/SendBirdGroupChannelFilter.UnreadChannelFilterEnum} unreadChannelFilter
 */
SendBirdGroupChannelFilter.prototype['unreadChannelFilter'] = undefined;

/**
 * @member {module:model/SendBirdGroupChannelFilterUserIdsFilter} userIdsFilter
 */
SendBirdGroupChannelFilter.prototype['userIdsFilter'] = undefined;





/**
 * Allowed values for the <code>hiddenChannelFilter</code> property.
 * @enum {String}
 * @readonly
 */
SendBirdGroupChannelFilter['HiddenChannelFilterEnum'] = {

    /**
     * value: "hidden_allow_auto_unhide"
     * @const
     */
    "hidden_allow_auto_unhide": "hidden_allow_auto_unhide",

    /**
     * value: "hidden_only"
     * @const
     */
    "hidden_only": "hidden_only",

    /**
     * value: "hidden_prevent_auto_unhide"
     * @const
     */
    "hidden_prevent_auto_unhide": "hidden_prevent_auto_unhide",

    /**
     * value: "unhidden_only"
     * @const
     */
    "unhidden_only": "unhidden_only"
};


/**
 * Allowed values for the <code>memberStateFilter</code> property.
 * @enum {String}
 * @readonly
 */
SendBirdGroupChannelFilter['MemberStateFilterEnum'] = {

    /**
     * value: "all"
     * @const
     */
    "all": "all",

    /**
     * value: "invited_by_friend"
     * @const
     */
    "invited_by_friend": "invited_by_friend",

    /**
     * value: "invited_by_non_friend"
     * @const
     */
    "invited_by_non_friend": "invited_by_non_friend",

    /**
     * value: "invited_only"
     * @const
     */
    "invited_only": "invited_only",

    /**
     * value: "joined_only"
     * @const
     */
    "joined_only": "joined_only"
};


/**
 * Allowed values for the <code>publicChannelFilter</code> property.
 * @enum {String}
 * @readonly
 */
SendBirdGroupChannelFilter['PublicChannelFilterEnum'] = {

    /**
     * value: "all"
     * @const
     */
    "all": "all",

    /**
     * value: "private"
     * @const
     */
    "private": "private",

    /**
     * value: "public"
     * @const
     */
    "public": "public"
};


/**
 * Allowed values for the <code>superChannelFilter</code> property.
 * @enum {String}
 * @readonly
 */
SendBirdGroupChannelFilter['SuperChannelFilterEnum'] = {

    /**
     * value: "all"
     * @const
     */
    "all": "all",

    /**
     * value: "nonsuper"
     * @const
     */
    "nonsuper": "nonsuper",

    /**
     * value: "super"
     * @const
     */
    "super": "super"
};


/**
 * Allowed values for the <code>unreadChannelFilter</code> property.
 * @enum {String}
 * @readonly
 */
SendBirdGroupChannelFilter['UnreadChannelFilterEnum'] = {

    /**
     * value: "all"
     * @const
     */
    "all": "all",

    /**
     * value: "unread_message"
     * @const
     */
    "unread_message": "unread_message"
};



export default SendBirdGroupChannelFilter;

