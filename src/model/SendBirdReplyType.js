/**
 * Sendbird Platform SDK
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SendBirdReplyType model module.
 * @module model/SendBirdReplyType
 * @version 1.0.0
 */
class SendBirdReplyType {
    /**
     * Constructs a new <code>SendBirdReplyType</code>.
     * @alias module:model/SendBirdReplyType
     */
    constructor() { 
        
        SendBirdReplyType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SendBirdReplyType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SendBirdReplyType} obj Optional instance to populate.
     * @return {module:model/SendBirdReplyType} The populated <code>SendBirdReplyType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SendBirdReplyType();

            if (data.hasOwnProperty('ALL')) {
                obj['ALL'] = ApiClient.convertToType(data['ALL'], 'String');
            }
            if (data.hasOwnProperty('NONE')) {
                obj['NONE'] = ApiClient.convertToType(data['NONE'], 'String');
            }
            if (data.hasOwnProperty('ONLY_REPLY_TO_CHANNEL')) {
                obj['ONLY_REPLY_TO_CHANNEL'] = ApiClient.convertToType(data['ONLY_REPLY_TO_CHANNEL'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/SendBirdReplyType.ALLEnum} ALL
 */
SendBirdReplyType.prototype['ALL'] = undefined;

/**
 * @member {module:model/SendBirdReplyType.NONEEnum} NONE
 */
SendBirdReplyType.prototype['NONE'] = undefined;

/**
 * @member {module:model/SendBirdReplyType.ONLYREPLYTOCHANNELEnum} ONLY_REPLY_TO_CHANNEL
 */
SendBirdReplyType.prototype['ONLY_REPLY_TO_CHANNEL'] = undefined;





/**
 * Allowed values for the <code>ALL</code> property.
 * @enum {String}
 * @readonly
 */
SendBirdReplyType['ALLEnum'] = {

    /**
     * value: "all"
     * @const
     */
    "all": "all"
};


/**
 * Allowed values for the <code>NONE</code> property.
 * @enum {String}
 * @readonly
 */
SendBirdReplyType['NONEEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none"
};


/**
 * Allowed values for the <code>ONLY_REPLY_TO_CHANNEL</code> property.
 * @enum {String}
 * @readonly
 */
SendBirdReplyType['ONLYREPLYTOCHANNELEnum'] = {

    /**
     * value: "only_reply_to_channel"
     * @const
     */
    "only_reply_to_channel": "only_reply_to_channel"
};



export default SendBirdReplyType;

