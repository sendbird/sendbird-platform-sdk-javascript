/**
 * Sendbird Platform SDK
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendbirdPlatformSdk);
  }
}(this, function(expect, SendbirdPlatformSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendbirdPlatformSdk.GroupChannelApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GroupChannelApi', function() {
    describe('gcAcceptInvitation', function() {
      it('should call gcAcceptInvitation successfully', function(done) {
        //uncomment below and update the code to test gcAcceptInvitation
        //instance.gcAcceptInvitation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gcCancelTheRegistrationOfOperators', function() {
      it('should call gcCancelTheRegistrationOfOperators successfully', function(done) {
        //uncomment below and update the code to test gcCancelTheRegistrationOfOperators
        //instance.gcCancelTheRegistrationOfOperators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gcCheckIfMemberById', function() {
      it('should call gcCheckIfMemberById successfully', function(done) {
        //uncomment below and update the code to test gcCheckIfMemberById
        //instance.gcCheckIfMemberById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gcCreateChannel', function() {
      it('should call gcCreateChannel successfully', function(done) {
        //uncomment below and update the code to test gcCreateChannel
        //instance.gcCreateChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gcDeclineInvitation', function() {
      it('should call gcDeclineInvitation successfully', function(done) {
        //uncomment below and update the code to test gcDeclineInvitation
        //instance.gcDeclineInvitation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gcDeleteChannelByUrl', function() {
      it('should call gcDeleteChannelByUrl successfully', function(done) {
        //uncomment below and update the code to test gcDeleteChannelByUrl
        //instance.gcDeleteChannelByUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gcHideOrArchiveChannel', function() {
      it('should call gcHideOrArchiveChannel successfully', function(done) {
        //uncomment below and update the code to test gcHideOrArchiveChannel
        //instance.gcHideOrArchiveChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gcInviteAsMembers', function() {
      it('should call gcInviteAsMembers successfully', function(done) {
        //uncomment below and update the code to test gcInviteAsMembers
        //instance.gcInviteAsMembers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gcJoinChannel', function() {
      it('should call gcJoinChannel successfully', function(done) {
        //uncomment below and update the code to test gcJoinChannel
        //instance.gcJoinChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gcLeaveChannel', function() {
      it('should call gcLeaveChannel successfully', function(done) {
        //uncomment below and update the code to test gcLeaveChannel
        //instance.gcLeaveChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gcListChannels', function() {
      it('should call gcListChannels successfully', function(done) {
        //uncomment below and update the code to test gcListChannels
        //instance.gcListChannels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gcListMembers', function() {
      it('should call gcListMembers successfully', function(done) {
        //uncomment below and update the code to test gcListMembers
        //instance.gcListMembers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gcListOperators', function() {
      it('should call gcListOperators successfully', function(done) {
        //uncomment below and update the code to test gcListOperators
        //instance.gcListOperators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gcRegisterOperators', function() {
      it('should call gcRegisterOperators successfully', function(done) {
        //uncomment below and update the code to test gcRegisterOperators
        //instance.gcRegisterOperators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gcResetChatHistory', function() {
      it('should call gcResetChatHistory successfully', function(done) {
        //uncomment below and update the code to test gcResetChatHistory
        //instance.gcResetChatHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gcUnhideOrUnarchiveChannel', function() {
      it('should call gcUnhideOrUnarchiveChannel successfully', function(done) {
        //uncomment below and update the code to test gcUnhideOrUnarchiveChannel
        //instance.gcUnhideOrUnarchiveChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gcUpdateChannelByUrl', function() {
      it('should call gcUpdateChannelByUrl successfully', function(done) {
        //uncomment below and update the code to test gcUpdateChannelByUrl
        //instance.gcUpdateChannelByUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gcViewChannelByUrl', function() {
      it('should call gcViewChannelByUrl successfully', function(done) {
        //uncomment below and update the code to test gcViewChannelByUrl
        //instance.gcViewChannelByUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
