/**
 * Sendbird Platform SDK
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendbirdPlatformSdk);
  }
}(this, function(expect, SendbirdPlatformSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendbirdPlatformSdk.GroupChannelApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GroupChannelApi', function() {
    describe('acceptAnInvitation', function() {
      it('should call acceptAnInvitation successfully', function(done) {
        //uncomment below and update the code to test acceptAnInvitation
        //instance.acceptAnInvitation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelTheRegistrationOfOperators', function() {
      it('should call cancelTheRegistrationOfOperators successfully', function(done) {
        //uncomment below and update the code to test cancelTheRegistrationOfOperators
        //instance.cancelTheRegistrationOfOperators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('checkIfMember', function() {
      it('should call checkIfMember successfully', function(done) {
        //uncomment below and update the code to test checkIfMember
        //instance.checkIfMember(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAGroupChannel', function() {
      it('should call createAGroupChannel successfully', function(done) {
        //uncomment below and update the code to test createAGroupChannel
        //instance.createAGroupChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAGroupChannel', function() {
      it('should call deleteAGroupChannel successfully', function(done) {
        //uncomment below and update the code to test deleteAGroupChannel
        //instance.deleteAGroupChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAGroupChannel', function() {
      it('should call getAGroupChannel successfully', function(done) {
        //uncomment below and update the code to test getAGroupChannel
        //instance.getAGroupChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hideAChannel', function() {
      it('should call hideAChannel successfully', function(done) {
        //uncomment below and update the code to test hideAChannel
        //instance.hideAChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('inviteAsMembers', function() {
      it('should call inviteAsMembers successfully', function(done) {
        //uncomment below and update the code to test inviteAsMembers
        //instance.inviteAsMembers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('joinAChannel', function() {
      it('should call joinAChannel successfully', function(done) {
        //uncomment below and update the code to test joinAChannel
        //instance.joinAChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('leaveAChannel', function() {
      it('should call leaveAChannel successfully', function(done) {
        //uncomment below and update the code to test leaveAChannel
        //instance.leaveAChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannels', function() {
      it('should call listChannels successfully', function(done) {
        //uncomment below and update the code to test listChannels
        //instance.listChannels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMembers', function() {
      it('should call listMembers successfully', function(done) {
        //uncomment below and update the code to test listMembers
        //instance.listMembers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOperators', function() {
      it('should call listOperators successfully', function(done) {
        //uncomment below and update the code to test listOperators
        //instance.listOperators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerOperatorsToAGroupChannel', function() {
      it('should call registerOperatorsToAGroupChannel successfully', function(done) {
        //uncomment below and update the code to test registerOperatorsToAGroupChannel
        //instance.registerOperatorsToAGroupChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetChatHistory', function() {
      it('should call resetChatHistory successfully', function(done) {
        //uncomment below and update the code to test resetChatHistory
        //instance.resetChatHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startTypingIndicators', function() {
      it('should call startTypingIndicators successfully', function(done) {
        //uncomment below and update the code to test startTypingIndicators
        //instance.startTypingIndicators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopTypingIndicators', function() {
      it('should call stopTypingIndicators successfully', function(done) {
        //uncomment below and update the code to test stopTypingIndicators
        //instance.stopTypingIndicators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unhideAChannel', function() {
      it('should call unhideAChannel successfully', function(done) {
        //uncomment below and update the code to test unhideAChannel
        //instance.unhideAChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAGroupChannel', function() {
      it('should call updateAGroupChannel successfully', function(done) {
        //uncomment below and update the code to test updateAGroupChannel
        //instance.updateAGroupChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
