/**
 * Sendbird Platform SDK
 * Sendbird Platform API Javascript SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendbirdPlatformSdk);
  }
}(this, function(expect, SendbirdPlatformSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendbirdPlatformSdk.OpenChannelApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OpenChannelApi', function() {
    describe('ocBanUser', function() {
      it('should call ocBanUser successfully', function(done) {
        //uncomment below and update the code to test ocBanUser
        //instance.ocBanUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ocCancelTheRegistrationOfOperators', function() {
      it('should call ocCancelTheRegistrationOfOperators successfully', function(done) {
        //uncomment below and update the code to test ocCancelTheRegistrationOfOperators
        //instance.ocCancelTheRegistrationOfOperators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ocCreateChannel', function() {
      it('should call ocCreateChannel successfully', function(done) {
        //uncomment below and update the code to test ocCreateChannel
        //instance.ocCreateChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ocDeleteChannelByUrl', function() {
      it('should call ocDeleteChannelByUrl successfully', function(done) {
        //uncomment below and update the code to test ocDeleteChannelByUrl
        //instance.ocDeleteChannelByUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ocFreezeChannel', function() {
      it('should call ocFreezeChannel successfully', function(done) {
        //uncomment below and update the code to test ocFreezeChannel
        //instance.ocFreezeChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ocListBannedUsers', function() {
      it('should call ocListBannedUsers successfully', function(done) {
        //uncomment below and update the code to test ocListBannedUsers
        //instance.ocListBannedUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ocListChannels', function() {
      it('should call ocListChannels successfully', function(done) {
        //uncomment below and update the code to test ocListChannels
        //instance.ocListChannels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ocListMutedUsers', function() {
      it('should call ocListMutedUsers successfully', function(done) {
        //uncomment below and update the code to test ocListMutedUsers
        //instance.ocListMutedUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ocListOperators', function() {
      it('should call ocListOperators successfully', function(done) {
        //uncomment below and update the code to test ocListOperators
        //instance.ocListOperators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ocListParticipants', function() {
      it('should call ocListParticipants successfully', function(done) {
        //uncomment below and update the code to test ocListParticipants
        //instance.ocListParticipants(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ocMuteUser', function() {
      it('should call ocMuteUser successfully', function(done) {
        //uncomment below and update the code to test ocMuteUser
        //instance.ocMuteUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ocRegisterOperators', function() {
      it('should call ocRegisterOperators successfully', function(done) {
        //uncomment below and update the code to test ocRegisterOperators
        //instance.ocRegisterOperators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ocUnbanUserById', function() {
      it('should call ocUnbanUserById successfully', function(done) {
        //uncomment below and update the code to test ocUnbanUserById
        //instance.ocUnbanUserById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ocUnmuteUserById', function() {
      it('should call ocUnmuteUserById successfully', function(done) {
        //uncomment below and update the code to test ocUnmuteUserById
        //instance.ocUnmuteUserById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ocUpdateBanById', function() {
      it('should call ocUpdateBanById successfully', function(done) {
        //uncomment below and update the code to test ocUpdateBanById
        //instance.ocUpdateBanById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ocUpdateChannelByUrl', function() {
      it('should call ocUpdateChannelByUrl successfully', function(done) {
        //uncomment below and update the code to test ocUpdateChannelByUrl
        //instance.ocUpdateChannelByUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ocViewBanById', function() {
      it('should call ocViewBanById successfully', function(done) {
        //uncomment below and update the code to test ocViewBanById
        //instance.ocViewBanById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ocViewChannelByUrl', function() {
      it('should call ocViewChannelByUrl successfully', function(done) {
        //uncomment below and update the code to test ocViewChannelByUrl
        //instance.ocViewChannelByUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ocViewMuteById', function() {
      it('should call ocViewMuteById successfully', function(done) {
        //uncomment below and update the code to test ocViewMuteById
        //instance.ocViewMuteById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
