/**
 * Sendbird Platform SDK
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendbirdPlatformSdk);
  }
}(this, function(expect, SendbirdPlatformSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendbirdPlatformSdk.MessageApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MessageApi', function() {
    describe('addEmojiCategories', function() {
      it('should call addEmojiCategories successfully', function(done) {
        //uncomment below and update the code to test addEmojiCategories
        //instance.addEmojiCategories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addEmojis', function() {
      it('should call addEmojis successfully', function(done) {
        //uncomment below and update the code to test addEmojis
        //instance.addEmojis(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addExtraDataToMessage', function() {
      it('should call addExtraDataToMessage successfully', function(done) {
        //uncomment below and update the code to test addExtraDataToMessage
        //instance.addExtraDataToMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addReactionToAMessage', function() {
      it('should call addReactionToAMessage successfully', function(done) {
        //uncomment below and update the code to test addReactionToAMessage
        //instance.addReactionToAMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEmojiByKey', function() {
      it('should call deleteEmojiByKey successfully', function(done) {
        //uncomment below and update the code to test deleteEmojiByKey
        //instance.deleteEmojiByKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEmojiCategoryById', function() {
      it('should call deleteEmojiCategoryById successfully', function(done) {
        //uncomment below and update the code to test deleteEmojiCategoryById
        //instance.deleteEmojiCategoryById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMessageById', function() {
      it('should call deleteMessageById successfully', function(done) {
        //uncomment below and update the code to test deleteMessageById
        //instance.deleteMessageById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enableReactions', function() {
      it('should call enableReactions successfully', function(done) {
        //uncomment below and update the code to test enableReactions
        //instance.enableReactions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gcMarkAllMessagesAsDelivered', function() {
      it('should call gcMarkAllMessagesAsDelivered successfully', function(done) {
        //uncomment below and update the code to test gcMarkAllMessagesAsDelivered
        //instance.gcMarkAllMessagesAsDelivered(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gcMarkAllMessagesAsRead', function() {
      it('should call gcMarkAllMessagesAsRead successfully', function(done) {
        //uncomment below and update the code to test gcMarkAllMessagesAsRead
        //instance.gcMarkAllMessagesAsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gcViewNumberOfEachMembersUnreadMessages', function() {
      it('should call gcViewNumberOfEachMembersUnreadMessages successfully', function(done) {
        //uncomment below and update the code to test gcViewNumberOfEachMembersUnreadMessages
        //instance.gcViewNumberOfEachMembersUnreadMessages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEmojiByKey', function() {
      it('should call getEmojiByKey successfully', function(done) {
        //uncomment below and update the code to test getEmojiByKey
        //instance.getEmojiByKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEmojiCategoryById', function() {
      it('should call getEmojiCategoryById successfully', function(done) {
        //uncomment below and update the code to test getEmojiCategoryById
        //instance.getEmojiCategoryById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStatistics', function() {
      it('should call getStatistics successfully', function(done) {
        //uncomment below and update the code to test getStatistics
        //instance.getStatistics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStatisticsDaily', function() {
      it('should call getStatisticsDaily successfully', function(done) {
        //uncomment below and update the code to test getStatisticsDaily
        //instance.getStatisticsDaily(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStatisticsMonthly', function() {
      it('should call getStatisticsMonthly successfully', function(done) {
        //uncomment below and update the code to test getStatisticsMonthly
        //instance.getStatisticsMonthly(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAllEmojisAndEmojiCategories', function() {
      it('should call listAllEmojisAndEmojiCategories successfully', function(done) {
        //uncomment below and update the code to test listAllEmojisAndEmojiCategories
        //instance.listAllEmojisAndEmojiCategories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAnnouncementGroups', function() {
      it('should call listAnnouncementGroups successfully', function(done) {
        //uncomment below and update the code to test listAnnouncementGroups
        //instance.listAnnouncementGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAnnouncements', function() {
      it('should call listAnnouncements successfully', function(done) {
        //uncomment below and update the code to test listAnnouncements
        //instance.listAnnouncements(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEmojis', function() {
      it('should call listEmojis successfully', function(done) {
        //uncomment below and update the code to test listEmojis
        //instance.listEmojis(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMessages', function() {
      it('should call listMessages successfully', function(done) {
        //uncomment below and update the code to test listMessages
        //instance.listMessages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listReactionsOfMessage', function() {
      it('should call listReactionsOfMessage successfully', function(done) {
        //uncomment below and update the code to test listReactionsOfMessage
        //instance.listReactionsOfMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('migrateMessagesByUrl', function() {
      it('should call migrateMessagesByUrl successfully', function(done) {
        //uncomment below and update the code to test migrateMessagesByUrl
        //instance.migrateMessagesByUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeExtraDataFromMessage', function() {
      it('should call removeExtraDataFromMessage successfully', function(done) {
        //uncomment below and update the code to test removeExtraDataFromMessage
        //instance.removeExtraDataFromMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeReactionFromAMessage', function() {
      it('should call removeReactionFromAMessage successfully', function(done) {
        //uncomment below and update the code to test removeReactionFromAMessage
        //instance.removeReactionFromAMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('scheduleAnnouncement', function() {
      it('should call scheduleAnnouncement successfully', function(done) {
        //uncomment below and update the code to test scheduleAnnouncement
        //instance.scheduleAnnouncement(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendMessage', function() {
      it('should call sendMessage successfully', function(done) {
        //uncomment below and update the code to test sendMessage
        //instance.sendMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('translateMessageIntoOtherLanguages', function() {
      it('should call translateMessageIntoOtherLanguages successfully', function(done) {
        //uncomment below and update the code to test translateMessageIntoOtherLanguages
        //instance.translateMessageIntoOtherLanguages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAnnouncementById', function() {
      it('should call updateAnnouncementById successfully', function(done) {
        //uncomment below and update the code to test updateAnnouncementById
        //instance.updateAnnouncementById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEmojiCategoryUrlById', function() {
      it('should call updateEmojiCategoryUrlById successfully', function(done) {
        //uncomment below and update the code to test updateEmojiCategoryUrlById
        //instance.updateEmojiCategoryUrlById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEmojiUrlByKey', function() {
      it('should call updateEmojiUrlByKey successfully', function(done) {
        //uncomment below and update the code to test updateEmojiUrlByKey
        //instance.updateEmojiUrlByKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateExtraDataInMessage', function() {
      it('should call updateExtraDataInMessage successfully', function(done) {
        //uncomment below and update the code to test updateExtraDataInMessage
        //instance.updateExtraDataInMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMessageById', function() {
      it('should call updateMessageById successfully', function(done) {
        //uncomment below and update the code to test updateMessageById
        //instance.updateMessageById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('useDefaultEmojis', function() {
      it('should call useDefaultEmojis successfully', function(done) {
        //uncomment below and update the code to test useDefaultEmojis
        //instance.useDefaultEmojis(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('viewMessageById', function() {
      it('should call viewMessageById successfully', function(done) {
        //uncomment below and update the code to test viewMessageById
        //instance.viewMessageById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('viewTotalNumberOfMessagesInChannel', function() {
      it('should call viewTotalNumberOfMessagesInChannel successfully', function(done) {
        //uncomment below and update the code to test viewTotalNumberOfMessagesInChannel
        //instance.viewTotalNumberOfMessagesInChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
