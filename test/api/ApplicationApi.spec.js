/**
 * Sendbird Platform SDK
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendbirdPlatformSdk);
  }
}(this, function(expect, SendbirdPlatformSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendbirdPlatformSdk.ApplicationApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ApplicationApi', function() {
    describe('addApnsPushConfiguration', function() {
      it('should call addApnsPushConfiguration successfully', function(done) {
        //uncomment below and update the code to test addApnsPushConfiguration
        //instance.addApnsPushConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addFcmPushConfiguration', function() {
      it('should call addFcmPushConfiguration successfully', function(done) {
        //uncomment below and update the code to test addFcmPushConfiguration
        //instance.addFcmPushConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addHmsPushConfiguration', function() {
      it('should call addHmsPushConfiguration successfully', function(done) {
        //uncomment below and update the code to test addHmsPushConfiguration
        //instance.addHmsPushConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addIpToWhitelist', function() {
      it('should call addIpToWhitelist successfully', function(done) {
        //uncomment below and update the code to test addIpToWhitelist
        //instance.addIpToWhitelist(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('banUsersInChannelsWithCustomChannelType', function() {
      it('should call banUsersInChannelsWithCustomChannelType successfully', function(done) {
        //uncomment below and update the code to test banUsersInChannelsWithCustomChannelType
        //instance.banUsersInChannelsWithCustomChannelType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAllowedIpsFromWhitelist', function() {
      it('should call deleteAllowedIpsFromWhitelist successfully', function(done) {
        //uncomment below and update the code to test deleteAllowedIpsFromWhitelist
        //instance.deleteAllowedIpsFromWhitelist(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApnsCertificateById', function() {
      it('should call deleteApnsCertificateById successfully', function(done) {
        //uncomment below and update the code to test deleteApnsCertificateById
        //instance.deleteApnsCertificateById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateSecondaryApiToken', function() {
      it('should call generateSecondaryApiToken successfully', function(done) {
        //uncomment below and update the code to test generateSecondaryApiToken
        //instance.generateSecondaryApiToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBannedUsersInChannelsWithCustomChannelType', function() {
      it('should call listBannedUsersInChannelsWithCustomChannelType successfully', function(done) {
        //uncomment below and update the code to test listBannedUsersInChannelsWithCustomChannelType
        //instance.listBannedUsersInChannelsWithCustomChannelType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMutedUsersInChannelsWithCustomChannelType', function() {
      it('should call listMutedUsersInChannelsWithCustomChannelType successfully', function(done) {
        //uncomment below and update the code to test listMutedUsersInChannelsWithCustomChannelType
        //instance.listMutedUsersInChannelsWithCustomChannelType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPushConfigurations', function() {
      it('should call listPushConfigurations successfully', function(done) {
        //uncomment below and update the code to test listPushConfigurations
        //instance.listPushConfigurations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPushNotificationContentTemplates', function() {
      it('should call listPushNotificationContentTemplates successfully', function(done) {
        //uncomment below and update the code to test listPushNotificationContentTemplates
        //instance.listPushNotificationContentTemplates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSecondaryApiTokens', function() {
      it('should call listSecondaryApiTokens successfully', function(done) {
        //uncomment below and update the code to test listSecondaryApiTokens
        //instance.listSecondaryApiTokens(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('muteUsersInChannelsWithCustomChannelType', function() {
      it('should call muteUsersInChannelsWithCustomChannelType successfully', function(done) {
        //uncomment below and update the code to test muteUsersInChannelsWithCustomChannelType
        //instance.muteUsersInChannelsWithCustomChannelType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removePushConfigurationById', function() {
      it('should call removePushConfigurationById successfully', function(done) {
        //uncomment below and update the code to test removePushConfigurationById
        //instance.removePushConfigurationById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retrieveIpWhitelist', function() {
      it('should call retrieveIpWhitelist successfully', function(done) {
        //uncomment below and update the code to test retrieveIpWhitelist
        //instance.retrieveIpWhitelist(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('revokeSecondaryApiTokenByToken', function() {
      it('should call revokeSecondaryApiTokenByToken successfully', function(done) {
        //uncomment below and update the code to test revokeSecondaryApiTokenByToken
        //instance.revokeSecondaryApiTokenByToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setDomainFilter', function() {
      it('should call setDomainFilter successfully', function(done) {
        //uncomment below and update the code to test setDomainFilter
        //instance.setDomainFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unbanUsersInChannelsWithCustomChannelType', function() {
      it('should call unbanUsersInChannelsWithCustomChannelType successfully', function(done) {
        //uncomment below and update the code to test unbanUsersInChannelsWithCustomChannelType
        //instance.unbanUsersInChannelsWithCustomChannelType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unmuteUsersInChannelsWithCustomChannelType', function() {
      it('should call unmuteUsersInChannelsWithCustomChannelType successfully', function(done) {
        //uncomment below and update the code to test unmuteUsersInChannelsWithCustomChannelType
        //instance.unmuteUsersInChannelsWithCustomChannelType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateApnsPushConfigurationById', function() {
      it('should call updateApnsPushConfigurationById successfully', function(done) {
        //uncomment below and update the code to test updateApnsPushConfigurationById
        //instance.updateApnsPushConfigurationById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDefaultChannelInvitationPreference', function() {
      it('should call updateDefaultChannelInvitationPreference successfully', function(done) {
        //uncomment below and update the code to test updateDefaultChannelInvitationPreference
        //instance.updateDefaultChannelInvitationPreference(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFcmPushConfigurationById', function() {
      it('should call updateFcmPushConfigurationById successfully', function(done) {
        //uncomment below and update the code to test updateFcmPushConfigurationById
        //instance.updateFcmPushConfigurationById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateHmsPushConfigurationById', function() {
      it('should call updateHmsPushConfigurationById successfully', function(done) {
        //uncomment below and update the code to test updateHmsPushConfigurationById
        //instance.updateHmsPushConfigurationById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePushNotificationContentTemplate', function() {
      it('should call updatePushNotificationContentTemplate successfully', function(done) {
        //uncomment below and update the code to test updatePushNotificationContentTemplate
        //instance.updatePushNotificationContentTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('viewDefaultChannelInvitationPreference', function() {
      it('should call viewDefaultChannelInvitationPreference successfully', function(done) {
        //uncomment below and update the code to test viewDefaultChannelInvitationPreference
        //instance.viewDefaultChannelInvitationPreference(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('viewPushConfigurationById', function() {
      it('should call viewPushConfigurationById successfully', function(done) {
        //uncomment below and update the code to test viewPushConfigurationById
        //instance.viewPushConfigurationById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('viewPushNotificationContentTemplate', function() {
      it('should call viewPushNotificationContentTemplate successfully', function(done) {
        //uncomment below and update the code to test viewPushNotificationContentTemplate
        //instance.viewPushNotificationContentTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('viewSecondaryApiTokenByToken', function() {
      it('should call viewSecondaryApiTokenByToken successfully', function(done) {
        //uncomment below and update the code to test viewSecondaryApiTokenByToken
        //instance.viewSecondaryApiTokenByToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
